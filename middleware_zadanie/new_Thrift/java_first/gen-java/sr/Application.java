package sr;

import javax.annotation.processing.Generated;

/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@Generated(value = "Autogenerated by Thrift Compiler (0.14.1)", date = "2021-06-03")
public class Application implements org.apache.thrift.TBase<Application, Application._Fields>, java.io.Serializable, Cloneable, Comparable<Application> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sr.Application");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField WROM_FIELD_DESC = new org.apache.thrift.protocol.TField("wrom", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField HR_FIELD_DESC = new org.apache.thrift.protocol.TField("hr", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ApplicationStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ApplicationTupleSchemeFactory();

  public int id; // required
  public @org.apache.thrift.annotation.Nullable Person wrom; // required
  public @org.apache.thrift.annotation.Nullable Person hr; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    WROM((short)2, "wrom"),
    HR((short)3, "hr");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // WROM
          return WROM;
        case 3: // HR
          return HR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WROM, new org.apache.thrift.meta_data.FieldMetaData("wrom", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Person.class)));
    tmpMap.put(_Fields.HR, new org.apache.thrift.meta_data.FieldMetaData("hr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Person.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Application.class, metaDataMap);
  }

  public Application() {
  }

  public Application(
    int id,
    Person wrom,
    Person hr)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.wrom = wrom;
    this.hr = hr;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Application(Application other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetWrom()) {
      this.wrom = new Person(other.wrom);
    }
    if (other.isSetHr()) {
      this.hr = new Person(other.hr);
    }
  }

  public Application deepCopy() {
    return new Application(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.wrom = null;
    this.hr = null;
  }

  public int getId() {
    return this.id;
  }

  public Application setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public Person getWrom() {
    return this.wrom;
  }

  public Application setWrom(@org.apache.thrift.annotation.Nullable Person wrom) {
    this.wrom = wrom;
    return this;
  }

  public void unsetWrom() {
    this.wrom = null;
  }

  /** Returns true if field wrom is set (has been assigned a value) and false otherwise */
  public boolean isSetWrom() {
    return this.wrom != null;
  }

  public void setWromIsSet(boolean value) {
    if (!value) {
      this.wrom = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public Person getHr() {
    return this.hr;
  }

  public Application setHr(@org.apache.thrift.annotation.Nullable Person hr) {
    this.hr = hr;
    return this;
  }

  public void unsetHr() {
    this.hr = null;
  }

  /** Returns true if field hr is set (has been assigned a value) and false otherwise */
  public boolean isSetHr() {
    return this.hr != null;
  }

  public void setHrIsSet(boolean value) {
    if (!value) {
      this.hr = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    case WROM:
      if (value == null) {
        unsetWrom();
      } else {
        setWrom((Person)value);
      }
      break;

    case HR:
      if (value == null) {
        unsetHr();
      } else {
        setHr((Person)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case WROM:
      return getWrom();

    case HR:
      return getHr();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case WROM:
      return isSetWrom();
    case HR:
      return isSetHr();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof Application)
      return this.equals((Application)that);
    return false;
  }

  public boolean equals(Application that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_wrom = true && this.isSetWrom();
    boolean that_present_wrom = true && that.isSetWrom();
    if (this_present_wrom || that_present_wrom) {
      if (!(this_present_wrom && that_present_wrom))
        return false;
      if (!this.wrom.equals(that.wrom))
        return false;
    }

    boolean this_present_hr = true && this.isSetHr();
    boolean that_present_hr = true && that.isSetHr();
    if (this_present_hr || that_present_hr) {
      if (!(this_present_hr && that_present_hr))
        return false;
      if (!this.hr.equals(that.hr))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetWrom()) ? 131071 : 524287);
    if (isSetWrom())
      hashCode = hashCode * 8191 + wrom.hashCode();

    hashCode = hashCode * 8191 + ((isSetHr()) ? 131071 : 524287);
    if (isSetHr())
      hashCode = hashCode * 8191 + hr.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Application other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetWrom(), other.isSetWrom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWrom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wrom, other.wrom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHr(), other.isSetHr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hr, other.hr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("sr.Application(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("wrom:");
    if (this.wrom == null) {
      sb.append("null");
    } else {
      sb.append(this.wrom);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hr:");
    if (this.hr == null) {
      sb.append("null");
    } else {
      sb.append(this.hr);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (wrom != null) {
      wrom.validate();
    }
    if (hr != null) {
      hr.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ApplicationStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ApplicationStandardScheme getScheme() {
      return new ApplicationStandardScheme();
    }
  }

  private static class ApplicationStandardScheme extends org.apache.thrift.scheme.StandardScheme<Application> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Application struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WROM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.wrom = new Person();
              struct.wrom.read(iprot);
              struct.setWromIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.hr = new Person();
              struct.hr.read(iprot);
              struct.setHrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Application struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.wrom != null) {
        oprot.writeFieldBegin(WROM_FIELD_DESC);
        struct.wrom.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.hr != null) {
        oprot.writeFieldBegin(HR_FIELD_DESC);
        struct.hr.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ApplicationTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ApplicationTupleScheme getScheme() {
      return new ApplicationTupleScheme();
    }
  }

  private static class ApplicationTupleScheme extends org.apache.thrift.scheme.TupleScheme<Application> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Application struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetWrom()) {
        optionals.set(1);
      }
      if (struct.isSetHr()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetWrom()) {
        struct.wrom.write(oprot);
      }
      if (struct.isSetHr()) {
        struct.hr.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Application struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.wrom = new Person();
        struct.wrom.read(iprot);
        struct.setWromIsSet(true);
      }
      if (incoming.get(2)) {
        struct.hr = new Person();
        struct.hr.read(iprot);
        struct.setHrIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

